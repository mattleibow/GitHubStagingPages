name: "Docs - PR Staging - Deploy"

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '.github/workflows/docs-deploy-staging-pr.yml'
    types: [ opened, synchronize, reopened ]

# Ensure documentation workflows run sequentially
concurrency:
  group: "docs-deployment"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: './docs'

      - name: Install dependencies
        run: |
          cd docs
          gem install bundler
          bundle install

      - name: Build with Jekyll for staging
        run: |
          cd docs
          # Update config for staging
          sed -i 's|baseurl: ""|baseurl: "/GitHubStagingPages/staging/${{ github.event.number }}"|' _config.yml
          sed -i 's|url: "https://mattleibow.github.io/GitHubStagingPages"|url: "https://mattleibow.github.io"|' _config.yml
          bundle exec jekyll build --baseurl "/GitHubStagingPages/staging/${{ github.event.number }}"
        env:
          JEKYLL_ENV: production

      - name: Upload staging artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-site-${{ github.event.number }}
          path: ./docs/_site
          retention-days: 1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Download staging artifact
        uses: actions/download-artifact@v4
        with:
          name: staging-site-${{ github.event.number }}
          path: /tmp/staging-temp

      - name: Setup staging directory
        run: |
          mkdir -p staging/${{ github.event.number }}
          rm -rf staging/${{ github.event.number }}/*
          cp -r /tmp/staging-temp/* staging/${{ github.event.number }}/
          rm -rf /tmp/staging-temp

      - name: Commit and push staging
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add staging/${{ github.event.number }}
          if ! git diff --cached --quiet; then
            git commit -m "Deploy staging docs for PR #${{ github.event.number }}"
            git push origin gh-pages
          else
            echo "No changes to commit"
          fi

  comment:
    runs-on: ubuntu-latest
    needs: deploy-staging
    permissions:
      pull-requests: write
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const stagingUrl = `https://mattleibow.github.io/GitHubStagingPages/staging/${{ github.event.number }}/`;

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('ðŸ“– Documentation Preview')
            );

            const commentBody = `ðŸ“– **Documentation Preview**

            The documentation for this PR has been deployed and is available at:

            ðŸ”— **[View Staging Documentation](${stagingUrl})**

            This preview will be updated automatically when you push new commits to this PR.

            ---
            *This comment is automatically updated by the documentation staging workflow.*`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }